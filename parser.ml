type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | INCREMENT
  | DECREMENT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | STRING
  | LBRAC
  | RBRAC
  | COLON
  | CHAR
  | BAR
  | EXP
  | PIXEL
  | DOT
  | ROWS
  | COLS
  | GRAY
  | LITERAL of (int)
  | ID of (string)
  | STR_LIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 56 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* INCREMENT *);
  270 (* DECREMENT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* RETURN *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* INT *);
  287 (* BOOL *);
  288 (* VOID *);
  289 (* STRING *);
  290 (* LBRAC *);
  291 (* RBRAC *);
  292 (* COLON *);
  293 (* CHAR *);
  294 (* BAR *);
  295 (* EXP *);
  296 (* PIXEL *);
  297 (* DOT *);
  298 (* ROWS *);
  299 (* COLS *);
  300 (* GRAY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* LITERAL *);
  302 (* ID *);
  303 (* STR_LIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\007\000\007\000\
\003\000\008\000\008\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\013\000\013\000\015\000\015\000\014\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\000\000\002\000\
\003\000\000\000\002\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\003\000\009\000\005\000\004\000\003\000\001\000\003\000\003\000\
\003\000\003\000\003\000\000\000\001\000\001\000\003\000\009\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\065\000\000\000\010\000\011\000\012\000\013\000\
\014\000\001\000\003\000\004\000\000\000\000\000\017\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\015\000\000\000\
\000\000\009\000\016\000\000\000\000\000\000\000\000\000\018\000\
\005\000\000\000\000\000\031\000\032\000\000\000\000\000\000\000\
\000\000\030\000\000\000\034\000\019\000\000\000\054\000\000\000\
\000\000\047\000\048\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\000\000\023\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\057\000\
\000\000\058\000\000\000\000\000\000\000\037\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\000\000\064\000\026\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\013\000\018\000\025\000\029\000\
\019\000\045\000\046\000\080\000\083\000\047\000\084\000"

let yysindex = "\005\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\223\254\062\255\000\000\203\255\
\253\254\046\255\060\255\000\000\070\255\203\255\000\000\006\255\
\203\255\000\000\000\000\025\255\083\255\075\255\000\255\000\000\
\000\000\000\255\000\255\000\000\000\000\008\255\077\255\082\255\
\091\255\000\000\048\255\000\000\000\000\031\001\000\000\090\001\
\095\255\000\000\000\000\000\000\051\001\000\255\000\255\000\255\
\000\255\000\255\000\255\014\255\000\000\183\255\199\255\000\255\
\000\255\000\255\000\255\000\255\000\255\000\255\000\255\000\255\
\000\255\000\000\000\255\000\000\000\000\108\001\200\001\076\255\
\126\001\200\001\093\255\100\255\200\001\245\000\000\000\000\000\
\099\255\000\000\104\255\210\255\104\255\000\000\000\000\239\001\
\239\001\041\000\041\000\041\000\041\000\235\001\218\001\163\001\
\171\255\000\255\171\255\000\000\000\255\081\255\000\255\000\255\
\092\255\071\001\000\000\200\001\000\255\200\001\182\001\171\255\
\000\255\010\001\000\255\000\000\115\255\111\255\144\001\171\255\
\000\255\000\000\000\000\200\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\122\255\
\000\000\000\000\123\255\000\000\000\000\000\000\000\000\000\000\
\131\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\126\255\000\000\
\128\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\255\000\000\
\000\000\012\255\000\000\129\255\066\255\000\000\000\000\000\000\
\037\000\000\000\085\000\061\000\109\000\000\000\000\000\211\000\
\235\000\133\000\157\000\181\000\205\000\248\255\059\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\142\255\000\000\000\000\045\255\000\000\067\255\000\000\000\000\
\134\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\207\255"

let yygindex = "\000\000\
\000\000\000\000\113\000\000\000\245\255\000\000\000\000\102\000\
\000\000\119\000\225\255\024\000\000\000\000\000\000\000"

let yytablesize = 771
let yytable = "\048\000\
\010\000\031\000\050\000\051\000\017\000\001\000\053\000\034\000\
\052\000\031\000\024\000\035\000\014\000\028\000\062\000\034\000\
\029\000\062\000\029\000\035\000\036\000\037\000\078\000\079\000\
\081\000\082\000\085\000\086\000\036\000\037\000\091\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\020\000\104\000\042\000\043\000\044\000\063\000\
\021\000\057\000\063\000\026\000\042\000\043\000\044\000\087\000\
\088\000\089\000\058\000\046\000\050\000\046\000\015\000\016\000\
\046\000\022\000\049\000\051\000\049\000\051\000\030\000\049\000\
\051\000\023\000\114\000\015\000\106\000\116\000\054\000\118\000\
\119\000\059\000\046\000\055\000\031\000\122\000\032\000\033\000\
\060\000\079\000\034\000\127\000\056\000\046\000\035\000\108\000\
\031\000\132\000\032\000\076\000\049\000\051\000\034\000\036\000\
\037\000\109\000\035\000\038\000\039\000\111\000\040\000\041\000\
\064\000\065\000\117\000\036\000\037\000\128\000\120\000\038\000\
\039\000\129\000\040\000\041\000\006\000\007\000\028\000\042\000\
\043\000\044\000\060\000\061\000\018\000\049\000\018\000\018\000\
\028\000\027\000\018\000\042\000\043\000\044\000\018\000\024\000\
\125\000\024\000\024\000\000\000\000\000\024\000\000\000\018\000\
\018\000\024\000\000\000\018\000\018\000\000\000\018\000\018\000\
\000\000\000\000\024\000\024\000\000\000\000\000\024\000\024\000\
\000\000\024\000\024\000\000\000\031\000\000\000\032\000\018\000\
\018\000\018\000\034\000\000\000\000\000\000\000\035\000\000\000\
\031\000\000\000\024\000\024\000\024\000\090\000\034\000\036\000\
\037\000\000\000\035\000\038\000\039\000\000\000\040\000\041\000\
\031\000\000\000\000\000\036\000\037\000\000\000\092\000\050\000\
\000\000\050\000\035\000\031\000\050\000\000\000\000\000\042\000\
\043\000\044\000\000\000\036\000\037\000\035\000\000\000\113\000\
\000\000\115\000\000\000\042\000\043\000\044\000\036\000\037\000\
\005\000\006\000\007\000\008\000\000\000\000\000\124\000\000\000\
\000\000\050\000\009\000\042\000\043\000\044\000\131\000\000\000\
\045\000\000\000\045\000\000\000\000\000\045\000\042\000\043\000\
\044\000\000\000\033\000\000\000\033\000\000\000\000\000\033\000\
\033\000\033\000\033\000\033\000\000\000\000\000\045\000\045\000\
\033\000\033\000\033\000\033\000\033\000\033\000\000\000\000\000\
\033\000\033\000\045\000\000\000\000\000\000\000\005\000\006\000\
\007\000\008\000\000\000\000\000\033\000\055\000\000\000\055\000\
\009\000\000\000\055\000\055\000\055\000\055\000\055\000\062\000\
\063\000\064\000\065\000\055\000\055\000\055\000\055\000\055\000\
\055\000\000\000\000\000\055\000\055\000\059\000\000\000\059\000\
\000\000\000\000\059\000\059\000\059\000\059\000\059\000\055\000\
\000\000\000\000\000\000\059\000\059\000\059\000\059\000\059\000\
\059\000\000\000\000\000\059\000\059\000\035\000\000\000\035\000\
\000\000\000\000\035\000\035\000\035\000\000\000\000\000\059\000\
\000\000\000\000\000\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\000\000\035\000\035\000\036\000\000\000\036\000\
\000\000\000\000\036\000\036\000\036\000\000\000\000\000\035\000\
\000\000\000\000\000\000\036\000\036\000\036\000\036\000\036\000\
\036\000\000\000\000\000\036\000\036\000\041\000\000\000\041\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\000\000\041\000\041\000\042\000\000\000\042\000\
\000\000\000\000\042\000\000\000\000\000\000\000\000\000\041\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\000\000\000\000\042\000\042\000\043\000\000\000\043\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\000\000\043\000\043\000\044\000\000\000\044\000\
\000\000\000\000\044\000\039\000\000\000\039\000\000\000\043\000\
\039\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
\044\000\039\000\039\000\044\000\044\000\000\000\000\000\000\000\
\000\000\039\000\039\000\040\000\000\000\040\000\000\000\044\000\
\040\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\
\000\000\040\000\040\000\062\000\063\000\064\000\065\000\000\000\
\000\000\040\000\040\000\066\000\067\000\068\000\069\000\070\000\
\071\000\000\000\000\000\072\000\073\000\040\000\000\000\000\000\
\062\000\063\000\064\000\065\000\000\000\000\000\000\000\110\000\
\066\000\067\000\068\000\069\000\070\000\071\000\000\000\061\000\
\072\000\073\000\000\000\000\000\000\000\062\000\063\000\064\000\
\065\000\000\000\000\000\000\000\126\000\066\000\067\000\068\000\
\069\000\070\000\071\000\077\000\000\000\072\000\073\000\000\000\
\000\000\062\000\063\000\064\000\065\000\000\000\000\000\000\000\
\000\000\066\000\067\000\068\000\069\000\070\000\071\000\121\000\
\000\000\072\000\073\000\000\000\000\000\062\000\063\000\064\000\
\065\000\000\000\000\000\000\000\000\000\066\000\067\000\068\000\
\069\000\070\000\071\000\000\000\074\000\072\000\073\000\075\000\
\062\000\063\000\064\000\065\000\000\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000\070\000\071\000\105\000\000\000\
\072\000\073\000\062\000\063\000\064\000\065\000\000\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\071\000\
\107\000\000\000\072\000\073\000\062\000\063\000\064\000\065\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\130\000\000\000\072\000\073\000\062\000\063\000\
\064\000\065\000\000\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\000\000\000\000\072\000\073\000\
\112\000\062\000\063\000\064\000\065\000\000\000\000\000\000\000\
\000\000\066\000\067\000\068\000\069\000\070\000\071\000\000\000\
\000\000\072\000\073\000\123\000\062\000\063\000\064\000\065\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\000\000\000\000\072\000\073\000\062\000\063\000\
\064\000\065\000\000\000\000\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\000\000\000\000\072\000\073\000\
\062\000\063\000\064\000\065\000\000\000\000\000\000\000\000\000\
\066\000\067\000\068\000\069\000\070\000\071\000\000\000\000\000\
\072\000\062\000\063\000\064\000\065\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\068\000\
\069\000\070\000\071\000"

let yycheck = "\031\000\
\000\000\002\001\034\000\035\000\016\000\001\000\038\000\008\001\
\001\001\002\001\022\000\012\001\046\001\025\000\003\001\008\001\
\001\001\006\001\003\001\012\001\021\001\022\001\054\000\055\000\
\056\000\057\000\058\000\059\000\021\001\022\001\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\046\001\075\000\045\001\046\001\047\001\003\001\
\003\001\002\001\006\001\046\001\045\001\046\001\047\001\042\001\
\043\001\044\001\011\001\001\001\092\000\003\001\001\001\002\001\
\006\001\006\001\001\001\001\001\003\001\003\001\046\001\006\001\
\006\001\004\001\106\000\001\001\001\001\109\000\002\001\111\000\
\112\000\034\001\024\001\002\001\002\001\117\000\004\001\005\001\
\041\001\121\000\008\001\123\000\002\001\035\001\012\001\003\001\
\002\001\129\000\004\001\005\001\035\001\035\001\008\001\021\001\
\022\001\006\001\012\001\025\001\026\001\011\001\028\001\029\001\
\009\001\010\001\034\001\021\001\022\001\003\001\027\001\025\001\
\026\001\011\001\028\001\029\001\003\001\003\001\001\001\045\001\
\046\001\047\001\003\001\003\001\002\001\032\000\004\001\005\001\
\003\001\025\000\008\001\045\001\046\001\047\001\012\001\002\001\
\121\000\004\001\005\001\255\255\255\255\008\001\255\255\021\001\
\022\001\012\001\255\255\025\001\026\001\255\255\028\001\029\001\
\255\255\255\255\021\001\022\001\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\255\255\002\001\255\255\004\001\045\001\
\046\001\047\001\008\001\255\255\255\255\255\255\012\001\255\255\
\002\001\255\255\045\001\046\001\047\001\007\001\008\001\021\001\
\022\001\255\255\012\001\025\001\026\001\255\255\028\001\029\001\
\002\001\255\255\255\255\021\001\022\001\255\255\008\001\001\001\
\255\255\003\001\012\001\002\001\006\001\255\255\255\255\045\001\
\046\001\047\001\255\255\021\001\022\001\012\001\255\255\105\000\
\255\255\107\000\255\255\045\001\046\001\047\001\021\001\022\001\
\030\001\031\001\032\001\033\001\255\255\255\255\120\000\255\255\
\255\255\035\001\040\001\045\001\046\001\047\001\128\000\255\255\
\001\001\255\255\003\001\255\255\255\255\006\001\045\001\046\001\
\047\001\255\255\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\023\001\024\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\024\001\035\001\255\255\255\255\255\255\030\001\031\001\
\032\001\033\001\255\255\255\255\035\001\001\001\255\255\003\001\
\040\001\255\255\006\001\007\001\008\001\009\001\010\001\007\001\
\008\001\009\001\010\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\035\001\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\008\001\255\255\255\255\035\001\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\008\001\255\255\255\255\035\001\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\035\001\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\035\001\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\035\001\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\001\001\255\255\003\001\255\255\035\001\
\006\001\255\255\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\015\001\016\001\023\001\024\001\255\255\255\255\255\255\
\255\255\023\001\024\001\001\001\255\255\003\001\255\255\035\001\
\006\001\255\255\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\015\001\016\001\007\001\008\001\009\001\010\001\255\255\
\255\255\023\001\024\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\035\001\255\255\255\255\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\035\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\001\001\
\023\001\024\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\255\255\255\255\255\255\035\001\015\001\016\001\017\001\
\018\001\019\001\020\001\001\001\255\255\023\001\024\001\255\255\
\255\255\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\001\001\
\255\255\023\001\024\001\255\255\255\255\007\001\008\001\009\001\
\010\001\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\003\001\023\001\024\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\003\001\255\255\
\023\001\024\001\007\001\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\003\001\255\255\023\001\024\001\007\001\008\001\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\003\001\255\255\023\001\024\001\007\001\008\001\
\009\001\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\023\001\024\001\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\007\001\008\001\
\009\001\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\024\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\023\001\007\001\008\001\009\001\010\001\007\001\008\001\009\001\
\010\001\015\001\016\001\017\001\018\001\019\001\020\001\017\001\
\018\001\019\001\020\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  INCREMENT\000\
  DECREMENT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  STRING\000\
  LBRAC\000\
  RBRAC\000\
  COLON\000\
  CHAR\000\
  BAR\000\
  EXP\000\
  PIXEL\000\
  DOT\000\
  ROWS\000\
  COLS\000\
  GRAY\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  STR_LIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 35 "parser.mly"
            ( _1 )
# 458 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                 ( [], [] )
# 464 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 39 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 472 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 40 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 480 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 44 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 495 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                  ( [] )
# 501 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 52 "parser.mly"
                  ( List.rev _1 )
# 508 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                             ( [(_1,_2)] )
# 516 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                             ( (_3,_4) :: _1 )
# 525 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                                    ( Int )
# 531 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                                    ( Bool )
# 537 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                                    ( Void )
# 543 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                                    ( String )
# 549 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                                    ( Pixel )
# 555 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                     ( [] )
# 561 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 67 "parser.mly"
                     ( _2 :: _1 )
# 569 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 70 "parser.mly"
                ( (_1, _2) )
# 577 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                   ( [] )
# 583 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                   ( _2 :: _1 )
# 591 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                                                            ( Expr _1 )
# 598 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                                                            ( Return Noexpr )
# 604 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                                                            ( Return _2 )
# 611 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 80 "parser.mly"
                                                            ( Block(List.rev _2) )
# 618 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                                            ( If(_3, _5, Block([])) )
# 626 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "parser.mly"
                                                            ( If(_3, _5, _7) )
# 635 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "parser.mly"
                                                            ( For(_3, _5, _7, _9) )
# 645 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 84 "parser.mly"
                                                            ( While(_3, _5) )
# 653 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                  ( Noexpr )
# 659 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                  ( _1 )
# 666 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 91 "parser.mly"
                                                           ( Literal(_1) )
# 673 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                                                           ( BoolLit(true) )
# 679 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                                                           ( BoolLit(false) )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                                                           ( Id(_1) )
# 692 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
                                                           ( StringLit(_1) )
# 699 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                                           ( Binop(_1, Add,   _3) )
# 707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                                           ( Binop(_1, Sub,   _3) )
# 715 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                                           ( Binop(_1, Mult,  _3) )
# 723 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                                           ( Binop(_1, Div,   _3) )
# 731 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                                           ( Binop(_1, Equal, _3) )
# 739 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                                           ( Binop(_1, Neq,   _3) )
# 747 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                                           ( Binop(_1, Less,  _3) )
# 755 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                                                           ( Binop(_1, Leq,   _3) )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                                                           ( Binop(_1, Greater, _3) )
# 771 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                                                           ( Binop(_1, Geq,   _3) )
# 779 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                                                           ( Binop(_1, And,   _3) )
# 787 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                                                           ( Binop(_1, Or,    _3) )
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                                                           ( Unop(Neg, _2) )
# 802 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                                                           ( Unop(Not, _2) )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                                                           ( Assign(_1, _3) )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                                                           ( Assignm(_1, _3, _6, _9) )
# 827 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                                                            ( Assignp(_1, GRAY, _5) )
# 835 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 113 "parser.mly"
                                                           ( Call(_1, _3) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                                                           ( _2 )
# 850 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pixel_lit) in
    Obj.repr(
# 115 "parser.mly"
                                                           ( _1 )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 116 "parser.mly"
                                                            ( Access(_1, GRAY) )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 117 "parser.mly"
                                                           ( Rows(_1) )
# 871 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 118 "parser.mly"
                                                           ( Cols(_1) )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                                                           ( Unop(Increment, _1) )
# 885 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                                                           ( Unop(Decrement, _1) )
# 892 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
                  ( [] )
# 898 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 124 "parser.mly"
                  ( List.rev _1 )
# 905 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                            ( [_1] )
# 912 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                            ( _3 :: _1 )
# 920 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                                                        ( PixelLit(_2, _4, _6, _8) )
# 930 "parser.ml"
               : 'pixel_lit))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
